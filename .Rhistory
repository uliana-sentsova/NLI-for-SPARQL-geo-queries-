gr
length(gr)
tapply(x, gr,sum)
tapply(x, group=gr, sum)
args(tapply)
tapply
example(tapply)
groups <- as.factor(rbinom(32, n = 5, prob = 0.4))
tapply(groups, groups, length)
dpois(100, 3)
dpois(100, 3)
plot(dpois(100, 3))
plot(dpois(1:1000, 3))
plot(dpois(1:100, 3))
plot(lines(dpois(1:100, 3)))
plot(dpois(1:100, 3))
plot(dpois(1:100, 3), lty = 1)
plot(dpois(1:100, 3), lty = 3)
plot(dpois(1:100, 3))
plot(dpois(seq(1, 100, 0.2, 3))
plot(dpois(seq(1, 100, 0.2), 3))
seq(1, 100, 0.2)
x <- seq(1, 100, 0.2)
plot(dpois(x, 3))
plot(dpois(x, 3))
x <- seq(1, 10, 0.2)
plot(dpois(x, 3))
plot(density(dpois(x, 3)))
x
x <- seq(1, 10, 0.1)
plot(pnorm(1197.69, 116182.2))
plot(rnorm(100, mean = 1197.69, sd = sqrt(116182.2)))
plot(rnorm(100, mean = 0, sd = 1)
)
rnorm(100, mean = 0, sd = 1)
pnorm(100, mean = 0, sd = 1)
1197.69 + 3*(116182.2**2)
1197.69 + 3*(116182.2)
1197.69 + 3*(sqrt(116182.2))
sqrt(116182.2)
1197.69 + 3*(sqrt(116182.2))
my.mean <- 1197.69
my.sd <- sqrt(116182.2)
my.sd
my.mean
means <- vector("numeric", 100)
my.mean <- 1197.69
my.sd <- sqrt(116182.2)
means <- vector("numeric", 100)
for (i in 1:100) {
means <- mean(rnorm(30, 1197.69, sd = sqrt(116182.2))
}
my.mean <- 1197.69
my.sd <- sqrt(116182.2)
means <- vector("numeric", 100)
for (i in 1:100) {
means <- mean(rnorm(30, 1197.69, sd = sqrt(116182.2)))
}
plot(means)
rnorm(30, 1197.69, sd = sqrt(116182.2))
x <- rnorm(100, 1197.69, sd = sqrt(116182.2))
for (i in 1:100) {
means <- mean(sample(x, 30))
}
plot(means)
means <- mean(sample(x, 30))
sample(x, 30)
mean(sample(x, 30))
set.seed(1)
for (i in 1:100) {
means <- mean(sample(x, 30))
}
plot(means)
means
set.seed(1)
for (i in 1:100) {
means[i] <- mean(sample(x, 30))
}
plot(means)
means
plot(density(means))
2015 - 1885
my.sd
my.sd / (sqrt(my.sd))
se <- my.sd / (sqrt(my.sd))
1197.69 + 3 * se
1197.69 + (3 * se)
116182.2/130
1197.69 + (3 * sqrt(893.7092))
116182.2/sqrt(130)
116182.2/130
1197.69 + 3*(sqrt(116182.2))
116182.2/130
116182.2/30
116182.2/30
sqrt(116182.2/30)
116182.2 + 3 *62.23
1197.69 + 3 *62.23
plot(density(rnorm(130, mean = 1197.69, sd = sqrt(116182.2)))
plot(density(rnorm(130, mean = 1197.69, sd = sqrt(116182.2))))
plot(density(rnorm(130, mean = 1197.69, sd = sqrt(116182.2))))
plot(density(rnorm(130, mean = 1197.69, sd = sqrt(116182.2))))
plot(density(rnorm(130, mean = 1197.69, sd = sqrt(116182.2))))
116182.2 / 130
sqrt(893.71)
116182.2 / 131
sqrt(116182.2 / 131)
1197.69 + 3 *29.78
1197.69 + 3 * 29.78
dpois(3)
dpois(x, lambda = 3)
x <- 1:100
dpois(x, lambda = 3)
y <- dpois(x, lambda = 3)
plot(density(y))
y <- dpois(x, lambda = 3)
x <- 1:1000
y <- dpois(x, lambda = 3)
plot(density(y))
x <- seq(1, 10, 0.1)
y <- dpois(x, lambda = 3)
plot(density(y))
plot(density(y))
y <- dpois(x, lambda = 3)
warnings()
x <- seq(1, 10)
y <- dpois(x, lambda = 3)
plot(density(y))
y
1 - ppois(5, 3)
ppois(0, 3)
ppois(0, 3)
1 - ppois(5, 3)
1 - ppois(4, 3)
ppois(5, 3)
1 - ppois(5, 3)
ppois(4, 3)
1 - ppois(4, 3)
1 - ppois(4, 3)
round(1 - ppois(4, 3), 2)
round(1 - ppois(4, 3), 2)
x  <- rnorm(10)
x
plot(x)
y(1:10)
y <- 1:10
plot(x,y)
summary(x)
set.seed(1)
rnorm(5)
rpois(2)
rpois(10,3)
plot(dpois(50, 3))
plot(dpois(1:100, 50, 3))
rnorm(10)
pnorm(1:10)
pnorm(0.2)
pnorm(0.2, lower.tail = F)
1 - pnorm(0.2, lower.tail = T)
print(pnorm(0.2) == 1 - pnorm(0.2, lower.tail = T))
print(pnorm(0.2) == 1 - pnorm(0.2, lower.tail = F))
set.seed(20)
x <- rnorm(100)
e <- rnorm(100, 0, 2)
y = 0.5 + 2.0 * x + e
plot(x,y)
+ e
y = 0.5 + 2.0 * x
plot(x,y)
y = 0.5 + 2.0 * x + e
plot(x,y)
e <- rnorm(100, 0, 5)
y = 0.5 + 2.0 * x + e
plot(x,y)
y = 0.5 + 2.0 * x
plot(x,y)
set.seed(20)
x <- rnorm(100)
e <- rnorm(100, 0, 5 )
# Мы получили просто прямую линию на графике:
y = 0.5 + 2.0 * x
plot(x,y)
# Если добавить остатки, то мы получим следующее:
y = 0.5 + 2.0 * x + e
plot(x,y)
# e - остатки
set.seed(20)
x <- rnorm(100)
e <- rnorm(100, 0, 2 )
# Мы получили просто прямую линию на графике:
y = 0.5 + 2.0 * x
plot(x,y)
# Если добавить остатки, то мы получим следующее:
y = 0.5 + 2.0 * x + e
plot(x,y)
x <- rbinom(100, 1, 0.5)
x
x <- rbinom(100, 2, 0.5)
x
x <- rbinom(100, 1, 0.5)
x
set.seed(10)
x <- rbinom(100, 1, 0.5)
y = 0.5 + 2.0 * x + e
plot(x,y)
x <- rnorm(100)
set.seed(1)
x <- rnorm(100)
log.my <- 0.5 + 0.2 * x
y <- rpois(100, exp,log.my)
log.my <- 0.5 + 0.2 * x
y <- rpois(100, exp,log.my)
y <- rpois(100, exp(log.my))
plot(x,y)
log.my <- 0.5 + 0.3 * x
y <- rpois(100, exp(log.my))
plot(x,y)
summary(y)
library(ggplot2)
qplot(df$number_of_clauses, df$total_pause_ms, data=df, col=df$Type, geom=c("point", "rug"))
d <-read.csv("dialecticism.csv", header=T, sep=',')
qplot(Type, df$number_of_clauses, data=df, colour=df$Type, geom="violin")
qplot(df$number_of_Cunits, data=df, fill=df$Type, color=df$Type, geom="dotplot", binwidth=5)
qplot(df$number_of_clauses, df$total_pause_ms, data=df, col=df$Type, geom=c("point", "rug"))
library(ggplot2)
qplot(df$number_of_clauses, df$total_pause_ms, data=df, col=df$Type, geom=c("point", "rug"))
d <-read.csv("dialecticism.csv", header=T, sep=',')
qplot(Type, df$number_of_clauses, data=df, colour=df$Type, geom="violin")
qplot(df$number_of_Cunits, data=df, fill=df$Type, color=df$Type, geom="dotplot", binwidth=5)
qplot(df$number_of_Cunits, data=df, fill=df$Type, geom="density", alpha=I(0.7), main = "плотность", xlab = "кол-во юнитов", ylab = "плотность")
qplot(df$Type, data=df, fill=df$Type, geom="bar", alpha=I(0.7), position = "dodge")
ggplot(df, aes(number_of_Cunits, total_pause_ms, col=df$Group)) +
geom_point() + geom_rug()
ggplot(df, aes(number_of_Cunits, total_pause_ms, col=df$Type, shape=df$Type)) +
geom_jitter() + geom_rug() + geom_smooth()
barplot(table(df$Type, df$Group), las = 1, horiz = F)
abline(v = (1:10)*50, col = "white")
qplot(Group, number_of_Cunits, data = df, fill = df$Group, geom="boxplot")
group1 <- subset(df, df$Group == "acoustic-mnestic" |  df$Group == "dynamic" | df$Group == "norm")
group2 <- subset(df, df$Group == "RHD" |  df$Group == "sensor" | df$Group == "efferent")
par(mfrow=c(1,1))
plot(df$Type)
qplot(group1$number_of_Cunits, data=group1, fill=group1$Group, geom="density", alpha=I(0.2), main = "плотность", xlab = "кол-во юнитов", ylab = "плотность")
qplot(group2$number_of_Cunits, data=group2, fill=group2$Group, geom="density", alpha=I(0.5),  main = "плотность", xlab = "кол-во юнитов", ylab = "плотность")
boxplot(df$total_length_ms ~ df$Group, las = 1, outline = F, col = c("red", "coral", "yellow", "lightgreen", "skyblue", 6), names=levels(df$Group))
stripchart(df$total_length_ms ~ df$Group, vertical=T, pch=1, cex=0.7, add=T, col="black", method="jitter")
barplot(df$number_of_falsestarts, col=df$Type, beside=F, horiz=F)
abline(h = c(1:10)*6, col='grey')
barplot(df$number_of_falsestarts, col=df$Type, beside=F, horiz=T)
abline(v = c(1:10)*6, col='grey')
s <- seq(from=1, to = 5, by = 0.1)
s[-c(7,1)]
sort(s, decreasing = T)
m <- matrix(seq(1,5.3, by=0.1), nrow=4, ncol=4, byrow = T)
rownames(m) <- c("die", "der", "das", "die")
colnames(m) <- c("nom", "gen", "dat", "acc")
t(m)
my.fac = gl(302, 180, labels = c("Control", "Treatment"))
library(ca)
languages <- read.csv("http://goo.gl/Etr2Wg", row.names = 1)
library(cluster)
library(ape)
library("FactoMineR")
students <- read.csv("http://goo.gl/dL6L0H", header=T, sep=',')
results <- students[,c(2,3,4)]
pca <- prcomp(students[,c(2,3,4)])
rot <- pca$rotation
results.pca <- PCA(results)
plot(results.pca)
# Рассчитываем
honest_students <- students[students$students != "v" & students$students != "h",]
nouns.mean <- mean(honest_students$nouns)
adj.mean <- mean(honest_students$adjectives)
verbs.mean <- mean(honest_students$verbs)
std.nouns <- sd(honest_students$nouns)
std.adj <- sd(honest_students$adjectives)
std.verbs <- sd(honest_students$verbs)
hist(students$nouns)
plot(density(students$nouns))
plot(density(students$nouns))
v.nouns <- students$nouns[students$students == "v"]
h.nouns <- students$nouns[students$students == "h"]
c.nouns <- students$nouns[students$students == "c"]
v.adj <- students$adjectives[students$students == "v"]
h.adj <- students$adjectives[students$students == "h"]
c.adj <- students$adjectives[students$students == "c"]
v.verbs <- students$verbs[students$students == "v"]
h.verbs <- students$verbs[students$students == "h"]
c.verbs <- students$verbs[students$students == "c"]
(v.nouns - nouns.mean) / std.nouns
(h.nouns - nouns.mean) / std.nouns
(c.nouns - nouns.mean) / std.nouns
(v.adj - adj.mean) / std.adj
(h.adj - adj.mean) / std.adj
(c.adj - adj.mean) / std.adj
(v.verbs - verbs.mean) / std.verbs
(h.verbs - verbs.mean) / std.verbs
(c.verbs - verbs.mean) / std.verbs
# доверительные интервалы:
c(nouns.mean + 1.96*std.nouns, nouns.mean - 1.96*std.nouns)
c(adj.mean + 1.96*std.adj, adj.mean - 1.96*std.adj)
c(verbs.mean + 1.96*std.verbs, verbs.mean - 1.96*std.verbs)
par(mfrow=c(1,3))
plot(density(students$nouns), col="red")
abline(v=nouns.mean, col="black", lty=3)
abline(v=v.nouns, col="green", lty=1)
abline(v=h.nouns, col="green", lty=1)
plot(density(students$adjectives), col="red")
abline(v=adj.mean, col="black", lty=3)
abline(v=v.adj, col="green", lty=1)
abline(v=h.adj, col="green", lty=1)
plot(density(students$verbs), col="red")
abline(v=verbs.mean, col="blacke", lty=3)
abline(v=v.verbs, col="green", lty=1)
abline(v=h.verbs, col="green", lty=1)
set.seed(1)
rpois(5, 2)
class(rpois(5, 2))
library(datasets)
Rprof()
fit <- lm(y ~ x1 + x2)
Rprof(NULL)
library(swirl)
swirl()
ls()
class(plants)
dim(plants)
nrow(plants)
ncol(plants)
object.size(plants)
names(plants)
head(plants)
head(plants, 10)
tail(plants, 15)
summary(plants)
table(plants$Active_Growth_Period)
str(plants)
?sample
sample(1:6, 4, replace=TRUE)
sample(1:6, 4, replace=TRUE)
sample(1:20, 10)
LETTERS
sample(LETTERS)
sample(c(0,1), 100, replace=TRUE, prob=c(0.3, 0.7))
flips <- sample(c(0,1), 100, replace = TRUE, prob =
| c(0.3, 0.7))
flips <- sample(c(0,1), 100, replace = TRUE, prob = c(0.3, 0.7))
flips
sum(flips)
?rbinom
rbinom(1, 100, 0.7)
flips2 <- sample(c(0,1), 100, replace=TRUE, prob=(0.3, 0.7))
flips2 <- sample(c(0,1), 100, replace=TRUE, prob=c(0.3, 0.7))
flips2  <- rbinom(1, 100, 0.7)
flips2  <- rbinom(n=100, size=100,prob =  0.7)
flips2  <- rbinom(n=100, size=1,prob =  0.7)
flips2
sum(flips2)
?rnorm
rnorm(10)
rnorm(10, mean = 100, sd = 25)
rpois(5, 10)
replicate(100, rpois(5,10))
my_pois  <- replicate(100, rpois(5, 10))
my_pois
cm <- colMeans(my_pois)
hist(cm)
data(cars)
?cars
head(cars)
plot(cars)
?plot
plot(x = cars$speed, y = cars$dist)
plot(dist~speed,cars)
plot(x = cars$dist, y = cars$speed)
plot(x = cars$speed, y = cars$dist, xlab = "Speed")
plot(x = cars$speed, y = cars$dist, xlab = "Speed", ylab = "Stopping Distance")
plot(x = cars$speed, y = cars$dist, ylab = "Stopping Distance")
plot(x = cars$speed, y = cars$dist, xlab = "Speed", ylab = "Stopping Distance")
plot(x = cars$speed, y = cars$dist, xlab = "Speed", ylab = "Stopping Distance", main="My Plot")
plot(cars, main="My Plot")
plot(cars, main="My Plot", subtitle = "My Plot Subtitle")
plot(cars, sub = "My Plot Subtitle")
plot(cars, col=2)
plot(cars, xlim = c(10,15))
plot(cars, pch=2)
data(mtcars)
?boxplot()
?boxplot
boxplot(mpg~cyl, mtcars)
hist(mtcars$mpg)
library(XLConnect)
install.packages("rJava",type='source')
library(XLConnect)
install.packages("XLConnectJars")
library(XLConnect)
library("XLConnectJars")
install.packages('rJava', type='source')
library(XLConnect)
library(xlsx)
xdat <- read.xls("getdata.xls", header = T, sheet=1)
library("gdata")
xdat <- read.xls("getdata.xls", header = T, sheet=1)
xdat <- read.xls("table.xls", header = T, sheet=1)
xdat <- read.xls("table.xls", header = T)
?gdata
xdat <- read.xls(xls = "table.xls")
install.packages("RMySQL")
library("RMySQL")
ucscDb <- dbConnect(MySQL(), user="genome", host="genome-mysql.cse.ucsc.edu")
result <- dbGetQuery(ucscDb, "show databases;")
res
result
result <- dbGetQuery(ucscDb, "show databases;"); dbDisconnect(ucscDb)
result
hg19 <- dbConnect(MySQL(), user="genome", db="hg19", host="genome-mysql.cse.ucsc.edu")
allTables <- dbListTables(hg19)
length(allTables)
hg19 <- dbConnect(MySQL(), user="genome", db="hg19", host="genome-mysql.cse.ucsc.edu")
allTables <- dbListTables(hg19)
length(allTables)
allTables[1:5]
dbGetQuery(hg19, "select count(*) from affyU133Plus2")
hg19 <- dbConnect(MySQL(), user="genome", db="hg19", host="genome-mysql.cse.ucsc.edu")
allTables <- dbListTables(hg19)
length(allTables)
allTables[1:5]
dbGetQuery(hg19, "select count(*) from affyU133Plus2")
dbListFields(hg19, "affyU133Plus2")
affy <- dbReadTable(gh19, "affyU133Plus2")
affy <- dbReadTable(hg19, "affyU133Plus2")
query <- dbSendQuery(hg19, "select * from affyU133Plus2 where misMatches between 1 and 3")
hg19 <- dbConnect(MySQL(), user="genome", db="hg19", host="genome-mysql.cse.ucsc.edu")
allTables <- dbListTables(hg19)
length(allTables)
allTables[1:5]
dbListFields(hg19, "affyU133Plus2")
dbGetQuery(hg19, "select count(*) from affyU133Plus2")
query <- dbSendQuery(hg19, "select * from affyU133Plus2 where misMatches between 1 and 3")
affyMis <- fetch(query)
quantile(affyMis$misMatches)
dbDisconnect(hg19)
library(httr)
install.packages("SPARQL")
setwd("~/Learning/Course_Work/untitled")
x <- read.csv("result.txt", header=F, sep="\t")
x
View(x)
sum(x$V2)
length(x)
length(x$V1)
length(x$V2[x$V3 == "некорректный запрос"])
sum(x$V3 == "некорректный запрос")
sum(x$V3 == "некорректный запрос")
x$V3 == "некорректный запрос"
x$V3[is.na(x$V3)]
x <- read.csv("result.txt", header=F, sep="\t")
sum(x$V3 == "некорректный запрос")
sum(x$V3 == "некорректный запрос")
sum(x$V3 != "некорректный запрос")
sum(x$V3 == "не найдена локация")
xtabs(x$V3)
table(x$V3)
x <- read.csv("result.txt", header=F, sep="\t")
sum(x$V3 != "некорректный запрос")
sum(x$V3 == "корректный запрос")
sum(x$V3 == "некорректный запрос")
sum(x$V3 == "корректный запрос")
sum(x$V3 == "не найдена локация")
table(x$V3)
x <- read.csv("result.txt", header=F, sep="\t")
sum(x$V2)
length(x$V1)
length(x$V2[x$V3 == "некорректный запрос"])
sum(x$V3 == "некорректный запрос")
sum(x$V3 == "корректный запрос")
sum(x$V3 == "не найдена локация")
xtabs(x$V3)
table(x$V3)
x$V1[x$V3 == "ошибка дезамбигуации"]
sum(x)
summary(x)
str(x)
x$V1 <- as.character(x$V1)
x
x$V1
str(x)
x <- read.csv("result.txt", header=F, sep="\t")
x$V1[x$V3 == "ошибка дезамбигуации"]
table(x$V3)
x <- read.csv("result.txt", header=F, sep="\t")
table(x$V3)
x <- read.csv("result.txt", header=F, sep="\t")
x$V1 <- as.character(x$V1)
table(x$V3)
x <- read.csv("result.txt", header=F, sep="\t")
table(x$V3)
hist(table(x$V3))
bar(table(x$V3))
barplot(table(x$V3))
mosaicplot(table(x$V3))
table(x$V3)
xtabs(x$V3[x$V2 == 0])
table(x$V3[x$V2 == 0])
mosaicplot(table(x$V3[x$V2 == 0]))
barplot(table(x$V3[x$V2 == 0]))
table(x$V3[x$V2 == 0])
x$V3[x$V2 == 0]
table(x$V3[x$V2 == 0])
sum(x$V3 == "корректный запрос")
length(x$V1)
sum(x$V3 == "корректный запрос")
